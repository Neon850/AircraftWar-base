@startuml
'https://plantuml.com/class-diagram

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # power:int
    # shootNum:int
    # direction:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + decreaseHp(int decrease):void
    + getHp():int
    + getDirection():int
    + getShootNum():int
    + getPower():int
    + increaseHp(int increase):int
    + increaseShootNum():void
    + resetShootNum(int num):void
    + {abstract} shoot():List<BaseBullet>
    # strategy:Strategy
    + setStrategy(Strategy strategy):void
    + excuteStrategy(AbstractAircraft abstractAircraft):List<BaseBullet>

 }

abstract class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power)
    + forward():void
	+ getPower():int
	+ musicEffect():void
}

abstract class AbstractProp
{
    + AbstractProp(int locationX, int locationY, int speedX, int speedY)
    + forward():void
    + addSubscribe(AbstractFlyingObject abstractFlyingObject):void
    + removeSubscribe(AbstractFlyingObject abstractFlyingObject):void
    + notifyAllSubscribe():void
    + influence(AbstractAircraft abstractAircraft):void
}

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- AbstractProp

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- MobEnemy
AbstractAircraft <|-- EliteEnemy
    AbstractAircraft <|-- BossEnemy

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractProp <|--BloodProp
AbstractProp <|--BombProp
AbstractProp <|--BulletProp


class HeroAircraft {
    - shootNum:int
    - power:int
    - direction:int
    + HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    - shootNum:int
    - heroAircraft:HeroAircraft
    + getInstance():HeroAircraft
    + getDirection():int
    + getShootNum():int
    + getPower():int
    + increaseShootNum():void
    + resetShootNum(int num):void
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + bomb():void
}
class EliteEnemy {
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + bomb():void
    + generateProp(List<AbstractProp>props):void
    + getDirection():int
    + getShootNum():int
    + getPower():int
}
class BossEnemy {
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp)
    + forward():void
    + shoot():List<BaseBullet>
    + generateProp(List<AbstractProp>props):void
    + getDirection():int
    + getShootNum():int
    + getPower():int

}

class HeroBullet {
    - musicThread:MusicThread
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
    + musicEffect():void
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power)
     + bomb():void
}
class BloodProp {
    + BloodProp(int locationX, int locationY,
     int speedX, int speedY)
     + influence(AbstractAircraft abstractAircraft):void
}
class BombProp {
    + BombProp(int locationX, int locationY,
     int speedX, int speedY)
    + addSubscribe(AbstractFlyingObject abstractFlyingObject):void
     + removeSubscribe(AbstractFlyingObject abstractFlyingObject):void
     + notifyAllSubscribe():void
     + influence(AbstractAircraft abstractAircraft):void
}
class BulletProp {
    - t:Thread
    - isScatterShoot:boolean
    - maxShootNum:int
    + BulletProp(int locationX, int locationY,
     int speedX, int speedY)
    + influence(AbstractAircraft abstractAircraft):void

}

@enduml